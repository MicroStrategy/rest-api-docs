// You have to run it from the root of the project
const sidebars = require("../sidebars.js");
const fs = require("fs");

//These files are not included in the sidebar for now. Might be added later.
const ignoreList = new Set([
  "common-workflows/modeling/manage-time-zone-objects/create-a-time-zone-object.md",
  "common-workflows/modeling/manage-time-zone-objects/manage-time-zone-objects.md",
  "common-workflows/modeling/manage-time-zone-objects/retrieve-a-list-of-time-zones-definitions.md",
  "common-workflows/modeling/manage-time-zone-objects/retrieve-a-time-zones-definition.md",
  "common-workflows/modeling/manage-time-zone-objects/update-a-time-zone-object.md",
]);

//Get all the .md files in the path directory recursively.
const getFiles = (path) => {
  const files = [];
  for (const file of fs.readdirSync(path)) {
    const fullPath = path + "/" + file;
    if (fs.lstatSync(fullPath).isDirectory())
      getFiles(fullPath).forEach((x) => {
        if (x.endsWith(".md")) {
          files.push(file + "/" + x);
        }
      });
    else {
      if (file.endsWith(".md")) {
        files.push(file);
      }
    }
  }
  return files;
};

// all the markdown files in docs folder.
const files = getFiles("./docs");

// make sure file path has .md extension
const addMarkdownExtension = (filePath) => {
  if (!filePath.endsWith(".md")) {
    return filePath + ".md";
  } else {
    return filePath;
  }
};

// all the markdown files in sidebar
const filesInSidebar = new Set();

//Check if the file is in the tree node of sidebars.js file
const generateSetFromSidebar = (fileSet, sidebarItem) => {
  if (typeof sidebarItem == "string") {
    //This is a leaf node
    fileSet.add(addMarkdownExtension(sidebarItem));
  } else if (Array.isArray(sidebarItem)) {
    //This is an array of child items.
    sidebarItem.forEach((childNode) => {
      generateSetFromSidebar(fileSet, childNode);
    });
  } else if (sidebarItem.type == "doc") {
    //This is doc type node. The id field is the file path.
    // generateSetFromSidebar(sidebarSet, treeNode.id);
    fileSet.add(addMarkdownExtension(sidebarItem.id));
  } else if (sidebarItem.type == "category") {
    //This is a folder. We check folder link and the children.
    // folder might not have a link.
    if (sidebarItem.link) {
      generateSetFromSidebar(fileSet, sidebarItem.link);
    }

    // check files inside the folder
    if (sidebarItem.items) {
      generateSetFromSidebar(fileSet, sidebarItem.items);
    }
  } else if (["link", "html", "ref"].includes(sidebarItem.type)) {
    //ignore if the sidebar item type is link,  html, or ref
    //link: means it links to internal or external url.
    //html: means this is an HTML doc.
    //ref: means it reference to an existing sidebar item
  } else if (sidebarItem.type == "autogenerated") {
    //TODO: We don't use this feature. If we start to use this feature, this part need to be implemented.
    // autogenerated means the sidebar is auto-generated from the file system.
    //Ref: https://docusaurus.io/docs/sidebar/autogenerated
    throw "Sidebar item type autogenerated is not supported yet. Fix the script!!! ";
  } else {
    //Force throw error, so we don't miss any unsupported cases.
    throw "Unknown sidebar item type. Not supported yet. Fix the script!!! ";
  }
};

generateSetFromSidebar(filesInSidebar, sidebars.tutorialSidebar);

console.log("Checking missing files from sidebars.js. The following files are not in sidebar: ");
files.forEach((file) => {
  if (!ignoreList.has(file) && !filesInSidebar.has(file)) {
    console.log(file);
  }
});
console.log("Finished checking missing files in sidebars.js");
