"use strict";(self.webpackChunkrest_api_docs=self.webpackChunkrest_api_docs||[]).push([[4598],{46129:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var t=r(74848),n=r(28453);const o={title:"Manage drivers",description:"Driver is a new object type added since MicroStrategy 2021 Update 8. This page contains a summary of REST APIs of \"drivers\" endpoint. You can use REST API requests to retrieve a driver's definition or retrieve a list of drivers' definitions or update a driver's definition."},a=void 0,s={id:"common-workflows/administration/manage-drivers/manage-drivers",title:"Manage drivers",description:"Driver is a new object type added since MicroStrategy 2021 Update 8. This page contains a summary of REST APIs of \"drivers\" endpoint. You can use REST API requests to retrieve a driver's definition or retrieve a list of drivers' definitions or update a driver's definition.",source:"@site/docs/common-workflows/administration/manage-drivers/manage-drivers.md",sourceDirName:"common-workflows/administration/manage-drivers",slug:"/common-workflows/administration/manage-drivers/",permalink:"/rest-api-docs/common-workflows/administration/manage-drivers/",draft:!1,unlisted:!1,editUrl:"https://github.com/MicroStrategy/rest-api-docs/tree/public/docs/common-workflows/administration/manage-drivers/manage-drivers.md",tags:[],version:"current",lastUpdatedBy:"ziyuhehe",lastUpdatedAt:1710490354,formattedLastUpdatedAt:"Mar 15, 2024",frontMatter:{title:"Manage drivers",description:"Driver is a new object type added since MicroStrategy 2021 Update 8. This page contains a summary of REST APIs of \"drivers\" endpoint. You can use REST API requests to retrieve a driver's definition or retrieve a list of drivers' definitions or update a driver's definition."},sidebar:"tutorialSidebar",previous:{title:"License audit and compliance check",permalink:"/rest-api-docs/common-workflows/administration/manage-licensing/license-audit-compliance"},next:{title:"Retrieve all drivers' definitions",permalink:"/rest-api-docs/common-workflows/administration/manage-drivers/retrieve-drivers"}},d={},c=[];function l(e){const i={a:"a",admonition:"admonition",li:"li",p:"p",ul:"ul",...(0,n.R)(),...e.components},{Available:r}=i;return r||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Available",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r,{since:"2021 Update 9"}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsx)(i.p,{children:'The feature flag "Disable or enable gateways and drivers" should be turned on. This requires a full metadata update.'})}),"\n",(0,t.jsx)(i.p,{children:'Driver is a new object type added since MicroStrategy 2021 Update 8. Each driver object is corresponding to a physical driver (used to fetch data from data sources) installed in IServer. By changing the "enabled" status of a driver object, customer can control whehter to block usage of corresponding physical driver or not.'}),"\n",(0,t.jsx)(i.p,{children:"This page contains a summary of REST APIs of \"drivers\" endpoint. You can use REST API requests to retrieve a driver's definition or retrieve a list of drivers' definitions or update a driver's definition."}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/rest-api-docs/common-workflows/administration/manage-drivers/retrieve-drivers",children:"List all drivers."})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/rest-api-docs/common-workflows/administration/manage-drivers/retrieve-a-driver-definition",children:"Retrieve a driver's definition."})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"/rest-api-docs/common-workflows/administration/manage-drivers/update-a-driver-definition",children:"Update a driver's definition."})}),"\n"]})]})}function m(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,i,r)=>{r.d(i,{R:()=>a,x:()=>s});var t=r(96540);const n={},o=t.createContext(n);function a(e){const i=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),t.createElement(o.Provider,{value:i},e.children)}}}]);