"use strict";(self.webpackChunkrest_api_docs=self.webpackChunkrest_api_docs||[]).push([[8153],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),d=i,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(f,a(a({ref:t},p),{},{components:r})):n.createElement(f,a({ref:t},p))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8048:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return m}});var n=r(3117),i=r(102),o=(r(7294),r(3905)),a=["components"],s={title:"Code sample - Filter reports and cubes using metric limits",description:"The code sample for filter reports and cubes using metric limits."},c=void 0,l={unversionedId:"common-workflows/filter-data/filter-report-and-cube-instances/filter-report-and-cube-instances-using-metric-limits/code-sample",id:"common-workflows/filter-data/filter-report-and-cube-instances/filter-report-and-cube-instances-using-metric-limits/code-sample",title:"Code sample - Filter reports and cubes using metric limits",description:"The code sample for filter reports and cubes using metric limits.",source:"@site/docs/common-workflows/filter-data/filter-report-and-cube-instances/filter-report-and-cube-instances-using-metric-limits/code-sample.md",sourceDirName:"common-workflows/filter-data/filter-report-and-cube-instances/filter-report-and-cube-instances-using-metric-limits",slug:"/common-workflows/filter-data/filter-report-and-cube-instances/filter-report-and-cube-instances-using-metric-limits/code-sample",permalink:"/rest-api-docs/common-workflows/filter-data/filter-report-and-cube-instances/filter-report-and-cube-instances-using-metric-limits/code-sample",draft:!1,editUrl:"https://github.com/MicroStrategy/rest-api-docs/tree/public/docs/common-workflows/filter-data/filter-report-and-cube-instances/filter-report-and-cube-instances-using-metric-limits/code-sample.md",tags:[],version:"current",lastUpdatedBy:"xdumstr",lastUpdatedAt:1667514843,formattedLastUpdatedAt:"Nov 3, 2022",frontMatter:{title:"Code sample - Filter reports and cubes using metric limits",description:"The code sample for filter reports and cubes using metric limits."},sidebar:"tutorialSidebar",previous:{title:"Supported operators for metric limits",permalink:"/rest-api-docs/common-workflows/filter-data/filter-report-and-cube-instances/filter-report-and-cube-instances-using-metric-limits/supported-operators"},next:{title:"Error messages for metric limits",permalink:"/rest-api-docs/common-workflows/filter-data/filter-report-and-cube-instances/filter-report-and-cube-instances-using-metric-limits/error-messages"}},p={},m=[],u={toc:m};function d(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"metricLimits")," parameter can include multiple metric filters. Each filter includes the ID of the metric and the filter expression for that metric. The filter expression is made up a ",(0,o.kt)("a",{parentName:"p",href:"/rest-api-docs/common-workflows/filter-data/filter-report-and-cube-instances/filter-report-and-cube-instances-using-metric-limits/supported-operators"},"supported operator")," and two operands."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "metricLimits": {\n    "metricId1": {\n      // expression1\n    },\n\n    "metricId2": {\n      // expression2\n    },\n    // ...\n    "metricIdN": {\n      // expressionN\n    }\n  }\n}\n')),(0,o.kt)("p",null,"The code sample below illustrates sample ",(0,o.kt)("inlineCode",{parentName:"p"},"body"),' parameter input for metric limits. It assumes that you are using a report or cube that has Cost and Profit metrics. The filter criteria are "Cost < 300000" and "Profit < 160000 or Profit > 200000".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "requestedObjects": {\n    // ...\n  },\n  "viewFilter": {\n    // ...\n  },\n  "metricLimits": {\n    // Here are the metric limits: Cost < 300000, Profit < 160000 or Profit > 200000\n    "7FD5B69611D5AC76C000D98A4CC5F24F": {\n      "operator": "<",\n      "operands": [\n        {\n          "type": "metric",\n          "id": "7FD5B69611D5AC76C000D98A4CC5F24F",\n          "name": "Cost"\n        },\n        {\n          "type": "constant",\n          "value": "300000",\n          "dataType": "Real"\n        }\n      ]\n    },\n    "4C051DB611D3E877C000B3B2D86C964F": {\n      "operator": "|",\n      "operands": [\n        {\n          "operator": "<",\n          "operands": [\n            {\n              "type": "metric",\n              "id": "4C051DB611D3E877C000B3B2D86C964F",\n              "name": "Profit"\n            },\n            {\n              "type": "constant",\n              "value": "160000",\n              "dataType": "Real"\n            }\n          ]\n        },\n        {\n          "operator": ">",\n          "operands": [\n            {\n              "type": "metric",\n              "id": "4C051DB611D3E877C000B3B2D86C964F",\n              "name": "Profit"\n            },\n            {\n              "type": "constant",\n              "value": "200000",\n              "dataType": "Real"\n            }\n          ]\n        }\n      ]\n    }\n  },\n  "sorting": [\n    // ...\n  ]\n}\n')))}d.isMDXComponent=!0}}]);